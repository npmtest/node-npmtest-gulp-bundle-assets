{"/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/test.js":"/* istanbul instrument in package npmtest_gulp_bundle_assets */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/lib.npmtest_gulp_bundle_assets.js":"/* istanbul instrument in package npmtest_gulp_bundle_assets */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_bundle_assets = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_bundle_assets = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-bundle-assets && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_bundle_assets */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_bundle_assets\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_bundle_assets.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_bundle_assets.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_bundle_assets.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_bundle_assets.__dirname + '/lib.npmtest_gulp_bundle_assets.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/index.js":"var through = require('through2'),\n  gutil = require('gulp-util'),\n  cache = require('./lib/service/cache'),\n  logger = require('./lib/service/logger'),\n  readableStream = require('readable-stream'),\n  duplexer = require('duplexer2'),\n  mergeStream = require('merge-stream'),\n  streamBundles = require('./lib/stream-bundles'),\n  results = require('./lib/results'),\n  transformHelper = require('./lib/transform_helper'),\n  ConfigModel = require('./lib/model/config'),\n  watch = require('./lib/watch');\n\nvar gulpBundleAssets = function (options) {\n  options = options || {};\n\n  var writable = new readableStream.Writable({objectMode: true});\n  var readable = through.obj(function (file, enc, cb) { // noop\n    this.push(file);\n    cb();\n  });\n\n  writable._write = function _write(file, encoding, done) {\n\n    var config;\n\n    if (file.isNull()) {\n      this.push(file);\n      return done();\n    }\n\n    if (file.isStream()) {\n      this.emit('error', new gutil.PluginError('gulp-bundle-assets', 'Streaming not supported'));\n      return done();\n    }\n\n    try {\n      config = new ConfigModel(file, options);\n    } catch (e) {\n      logger.log(gutil.colors.red('Failed to parse config file:'), gutil.colors.red(file.path));\n      logger.log(e);\n      this.emit('error', new gutil.PluginError('gulp-bundle-assets', e));\n      return done();\n    }\n\n    cache.set('config', config);\n\n    mergeStream.apply(mergeStream, streamBundles(config))\n      .pipe(readable);\n    return done();\n  };\n\n  return duplexer(writable, readable);\n};\n\ngulpBundleAssets.results = results.all;\ngulpBundleAssets.transformHelper = transformHelper;\ngulpBundleAssets.watch = watch;\n\nmodule.exports = gulpBundleAssets;","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/service/cache.js":"function Cache() {\n  this._cache = {};\n}\n\nCache.prototype.set = function (key, value) {\n  this._cache[key] = value;\n};\n\nCache.prototype.get = function (key) {\n  return this._cache[key];\n};\n\n// naturally a singleton because node's require caches the value assigned to module.exports\nmodule.exports = new Cache();","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/service/logger.js":"var gutil = require('gulp-util'),\n  cache = require('./cache');\n\nfunction Logger() {\n}\n\nLogger.prototype.log = function () {\n  var config = cache.get('config');\n  if (!config || !config.options || config.options.quietMode !== true) {\n    // replace with gulp logger once it's done? https://github.com/gulpjs/gulp-util/issues/33\n    gutil.log.apply(gutil.log, arguments);\n  }\n};\n\n// naturally a singleton because node's require caches the value assigned to module.exports\nmodule.exports = new Logger();","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/stream-bundles.js":"var util = require('util'),\n  BundleKeys = require('./model/bundle-keys'),\n  gutil = require('gulp-util'),\n  logger = require('./service/logger'),\n  _ = require('lodash'),\n  pathifySrc = require('./pathify-config-src'),\n  stringHelper = require('./string-helper'),\n  bundleAllEnvironments = require('./bundle-all-environments'),\n  initOptionDefaults = require('./init-option-defaults'),\n  streamFiles = require('./stream-files'),\n  streamCopy = require('./stream-copy'),\n  streamBundlesUtil = require('./stream-bundles-util');\n\nfunction _bundle(config, env) {\n  var streams = [],\n    bundles = config.bundle,\n    isBundleAll = config.options && config.options.bundleAllEnvironments,\n    base = (config.options) ? config.options.base : '.', // can guarantee !!options b/c (config instanceof Config)\n    minSrcs = (config.getAllMinSrcs) ? config.getAllMinSrcs() : {};\n\n  if (env) {\n    logger.log('Creating bundle(s) for environment \"' + env + '\"');\n  }\n\n  _.forEach(Object.keys(bundles), function (bundleName) {\n\n    var namedBundleObj = bundles[bundleName];\n    initOptionDefaults(namedBundleObj);\n\n    _.forEach(Object.keys(namedBundleObj), function (type) {\n\n      /* jshint -W035 */\n      if (type === BundleKeys.SCRIPTS || type === BundleKeys.STYLES) {\n        streams.push(streamFiles[type]({\n          src: pathifySrc(namedBundleObj[type], base, namedBundleObj[BundleKeys.OPTIONS], env),\n          base: base,\n          env: env,\n          type: type,\n          bundleName: bundleName,\n          bundleOptions: namedBundleObj[BundleKeys.OPTIONS],\n          bundleOrder: Object.keys(bundles),\n          isBundleAll: isBundleAll,\n          minSrcs: minSrcs\n        }));\n      } else if (type === BundleKeys.OPTIONS) {\n        // ok\n      } else {\n        throw new gutil.PluginError('gulp-bundle-assets', 'Unsupported object key found: \"bundle.' +\n          bundleName + '.' + type + '\". Supported types are \"' +\n          BundleKeys.SCRIPTS + '\", \"' + BundleKeys.STYLES + '\" and \"' + BundleKeys.OPTIONS + '\"');\n      }\n      /* jshint +W035 */\n\n    });\n\n  });\n\n  return streams;\n}\n\nfunction _copy(config) {\n  var streams = [],\n    copy = config.copy,\n    base = (config.options) ? config.options.base : '.'; // can guarantee !!options b/c (config instanceof Config)\n\n  if (typeof copy === 'string') {\n    streams.push(streamCopy.getStringCopyStream(copy, base));\n  } else if (util.isArray(copy)) {\n    _.forEach(copy, function (item) {\n      streams.push(streamCopy.getCopyStream(item, base));\n    });\n  } else if (typeof copy === 'object') {\n    streams.push(streamCopy.getObjectCopyStream(copy, base));\n  } else {\n    streamCopy.throwUnsupportedSyntaxError();\n  }\n\n  return streams;\n}\n\n\nfunction bundle(config) {\n  var streams = [];\n\n  if (config.bundle) {\n    if (config.options && config.options.bundleAllEnvironments) { // can guarantee !!options b/c (config instanceof Config)\n      streams = streams.concat(bundleAllEnvironments(config, _bundle));\n    } else {\n      streams = streams.concat(_bundle(config, process.env.NODE_ENV));\n    }\n  }\n\n  streamBundlesUtil.warnIfNoBundleProperty(config);\n\n  if (config.copy) {\n    streams = streams.concat(_copy(config));\n  }\n\n  return streams;\n}\n\nmodule.exports = bundle;\n","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/model/bundle-keys.js":"var defaults = require('lodash').defaults;\nmodule.exports = defaults({\n  OPTIONS: 'options'\n}, require('./bundle-type'));","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/model/bundle-type.js":"module.exports = {\n  SCRIPTS: 'scripts',\n  STYLES: 'styles'\n};","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/pathify-config-src.js":"var path = require('path'),\n  util = require('util'),\n  _ = require('lodash'),\n  ERROR_MSG_PREFIX = 'Config parse error. ';\n\nfunction stringSrc(src, base) {\n  if (base && base !== '.') {\n    return path.join(base, src);\n  }\n  return src;\n}\n\nfunction arrayOrStringSrc(src, base, options, env) {\n  if (typeof src === 'string') {\n    return stringSrc(src, base);\n  } else if (util.isArray(src)) {\n    for (var i = 0; i < src.length; i++) {\n      if (src[i] && typeof src[i] === 'object') { // typeof null === 'object'\n        src[i] = objectSrc(src[i], base, options, env);\n      } else if (typeof src[i] === 'string') {\n        src[i] = stringSrc(src[i], base);\n      } else {\n        throw new Error(ERROR_MSG_PREFIX + 'Invalid bundle glob detected. Expected string or object but got ' + src);\n      }\n    }\n    return src;\n  }\n  throw new Error(ERROR_MSG_PREFIX + 'Invalid bundle glob detected. Expected string or array but got ' + src);\n}\n\nfunction objectSrc(src, base, options, env) {\n  if (options && !src.src && options.useMin === false) {\n    throw new Error(ERROR_MSG_PREFIX + 'useMin=false but no src defined');\n  } else if (!options) {\n    if (!src.src) {\n      if (!src.minSrc) {\n        throw new Error(ERROR_MSG_PREFIX + 'Invalid bundle glob detected. Neither src nor minSrc defined.');\n      }\n      return arrayOrStringSrc(src.minSrc, base, options, env);\n    }\n  } else if (options.useMin) {\n    if (typeof options.useMin === 'string') {\n      if (options.useMin === env && src.minSrc) {\n        return arrayOrStringSrc(src.minSrc, base, options, env);\n      }\n      return arrayOrStringSrc(src.src, base, options, env);\n    } else if (util.isArray(options.useMin)) {\n      if (_.contains(options.useMin, env) && src.minSrc) {\n        return arrayOrStringSrc(src.minSrc, base, options, env);\n      }\n      return arrayOrStringSrc(src.src, base, options, env);\n    } else if (!src.minSrc) {\n      return arrayOrStringSrc(src.src, base, options, env); // for array notation allow some to be defined\n    }\n    return arrayOrStringSrc(src.minSrc, base, options, env);\n  }\n  return arrayOrStringSrc(src.src, base, options, env);\n}\n\n/**\n * Converts a config value of src glob(s) to a result that gulp can understand\n * https://github.com/wearefractal/vinyl-fs/blob/master/lib/src/index.js#L41\n *\n * @param {String|Array|Object} src\n * @param {String} base\n * @param {Object} options\n * @param {String} env\n * @returns {String|Array}\n */\nmodule.exports = function (src, base, options, env) {\n  var srcCopy = _.cloneDeep(src); // this func mutates src so make a copy first\n  if (typeof srcCopy === 'string' || util.isArray(srcCopy)) {\n    return arrayOrStringSrc(srcCopy, base, options, env);\n  } else if (srcCopy && typeof srcCopy === 'object') { // typeof null === 'object'\n    return objectSrc(srcCopy, base, options, env);\n  }\n  throw new Error(ERROR_MSG_PREFIX + 'Invalid bundle glob detected. Expected string, array or object but got ' + srcCopy);\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/string-helper.js":"module.exports = {\n  endsWith: function (str, suffix) {\n    if (typeof str !== 'string' || typeof suffix !== 'string') {\n      throw new Error('stringHelper.endsWith expected strings but got str \"' + str + '\" and suffix \"' + suffix + '\"');\n    }\n    return str.indexOf(suffix, str.length - suffix.length) !== -1;\n  }\n};","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/bundle-all-environments.js":"var _ = require('lodash');\n\nmodule.exports = function (config, bundleFunc) {\n  var streams = [],\n    environments = config.getAllEnvironments();\n  environments.push(''); // also run bundling with no env set\n\n  _.forEach(environments, function (env) {\n    streams = streams.concat(bundleFunc(config, env));\n  });\n\n  return streams;\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/init-option-defaults.js":"var BundleKeys = require('./model/bundle-keys'),\n  gutil = require('gulp-util'),\n  defaults = require('lodash').defaults;\n\nvar sourcemapDefaults = {\n  init: {loadMaps: true},\n  write: {},\n  destPath: 'maps'\n};\n\nmodule.exports = function (bundle) {\n  bundle[BundleKeys.OPTIONS] = bundle[BundleKeys.OPTIONS] || {};\n  bundle[BundleKeys.OPTIONS].transforms = bundle[BundleKeys.OPTIONS].transforms || {};\n  bundle[BundleKeys.OPTIONS].transforms[BundleKeys.SCRIPTS] = bundle[BundleKeys.OPTIONS].transforms[BundleKeys.SCRIPTS] || gutil.noop;\n  bundle[BundleKeys.OPTIONS].transforms[BundleKeys.STYLES] = bundle[BundleKeys.OPTIONS].transforms[BundleKeys.STYLES] || gutil.noop;\n  bundle[BundleKeys.OPTIONS].watch = bundle[BundleKeys.OPTIONS].watch || {};\n  bundle[BundleKeys.OPTIONS].pluginOptions = bundle[BundleKeys.OPTIONS].pluginOptions || {};\n  bundle[BundleKeys.OPTIONS].pluginOptions['gulp-clean-css'] = bundle[BundleKeys.OPTIONS].pluginOptions['gulp-clean-css'] || {};\n  bundle[BundleKeys.OPTIONS].pluginOptions['gulp-uglify'] = bundle[BundleKeys.OPTIONS].pluginOptions['gulp-uglify'] || {};\n  bundle[BundleKeys.OPTIONS].pluginOptions['gulp-concat'] = bundle[BundleKeys.OPTIONS].pluginOptions['gulp-concat'] || {};\n\n  bundle[BundleKeys.OPTIONS].pluginOptions['gulp-sourcemaps'] = defaults(bundle[BundleKeys.OPTIONS].pluginOptions['gulp-sourcemaps'] || {}, sourcemapDefaults);\n\n  // This is to get a clone of the base options\n  var sourcemapBaseOpts = defaults({}, bundle[BundleKeys.OPTIONS].pluginOptions['gulp-sourcemaps']);\n  // Remove the style and script sub attributes\n  delete sourcemapBaseOpts[BundleKeys.SCRIPTS];\n  delete sourcemapBaseOpts[BundleKeys.STYLES];\n\n  bundle[BundleKeys.OPTIONS].pluginOptions['gulp-sourcemaps'][BundleKeys.SCRIPTS] = defaults(bundle[BundleKeys.OPTIONS].pluginOptions['gulp-sourcemaps'][BundleKeys.SCRIPTS] || {}, sourcemapBaseOpts);\n  bundle[BundleKeys.OPTIONS].pluginOptions['gulp-sourcemaps'][BundleKeys.STYLES] = defaults(bundle[BundleKeys.OPTIONS].pluginOptions['gulp-sourcemaps'][BundleKeys.STYLES] || {}, sourcemapBaseOpts);\n\n  bundle[BundleKeys.OPTIONS].order = bundle[BundleKeys.OPTIONS].order || {};\n};","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/stream-files.js":"var gulp = require('gulp'),\n  through = require('through2'),\n  gif = require('gulp-if'),\n  concat = require('gulp-concat'),\n  uglify = require('gulp-uglify'),\n  rev = require('gulp-rev'),\n  streamify = require('gulp-streamify'),\n  cleanCSS = require('gulp-clean-css'),\n  gsourcemaps = require('gulp-sourcemaps'),\n  gutil = require('gulp-util'),\n  order = require('gulp-order'),\n  logger = require('./service/logger'),\n  using = require('./using'),\n  sourcemaps = require('./sourcemaps'),\n  isOptionEnabled = require('./is-option-enabled'),\n  addBundleResultsToFile = require('./results/add-bundle-results-to-file'),\n  BundleKeys = require('./model/bundle-keys'),\n  isMinEnabled = require('./is-min-enabled'),\n  defaults = require('lodash').defaults;\n\nmodule.exports.handleTransformError = function (thisStream, isWatch, bundleName, bundleKey, err) {\n  logger.log(gutil.colors.red(\"ERROR in custom transforms for '\" + bundleName + \".\" + bundleKey + \"':\"));\n  logger.log(err.toString());\n  if (isWatch) {\n    thisStream.emit('end');\n  } else {\n    process.exit(1);\n  }\n};\n\nmodule.exports.attachStreamOptions = function (file, opts) {\n  // add some useful options to file for possible inspection later in external custom gulp streams\n  file.bundleOptions = {\n    env: opts.env,\n    type: opts.type,\n    bundleName: opts.bundleName,\n    isWatch: opts.isWatch,\n    isBundleAll: opts.isBundleAll\n  };\n};\n\nmodule.exports.scripts = function (opts) {\n  var self = this,\n    concatOpts = defaults({\n      path: opts.bundleName + ((opts.isBundleAll && opts.env) ? '.' + opts.env : '') + '.js'\n    }, opts.bundleOptions.pluginOptions['gulp-concat']);\n\n  var relativeSources = [];\n  return gulp.src(opts.src, {base: opts.base})\n    .pipe(using.bundle(opts.bundleName, BundleKeys.SCRIPTS, opts.env, opts.isBundleAll))\n    .pipe(through.obj(function (file, enc, cb) {\n      relativeSources.push(file.relative);\n      self.attachStreamOptions(file, opts);\n      this.push(file);\n      cb();\n    }))\n    .pipe(gif(function (file) {\n        return sourcemaps.isEnabled(opts);\n      }, gsourcemaps.init(opts.bundleOptions.pluginOptions['gulp-sourcemaps'][BundleKeys.SCRIPTS].init)\n    ))\n    .pipe(opts.bundleOptions.transforms[BundleKeys.SCRIPTS]())\n    .on('error', function (e) {\n      self.handleTransformError(this, opts.isWatch, opts.bundleName, BundleKeys.SCRIPTS, e);\n    })\n    .pipe(gif(function (file) {\n        return sourcemaps.isEnabled(opts);\n      }, through.obj(sourcemaps.verify)\n    ))\n    .pipe(gif(function (file) {\n        return isMinEnabled.js(file, opts);\n      },\n      gif(function (file) {\n          return file.isStream();\n        },\n        streamify(\n          uglify(opts.bundleOptions.pluginOptions['gulp-uglify'])),\n        uglify(opts.bundleOptions.pluginOptions['gulp-uglify'])\n      )))\n    .on('error', function (e) {\n      self.handleTransformError(this, opts.isWatch, opts.bundleName, BundleKeys.SCRIPTS, e);\n    })\n    .pipe(gif(function (file) {\n        return opts.bundleOptions.order && opts.bundleOptions.order.scripts;\n      }, order(opts.bundleOptions.order.scripts)\n    ))\n    .pipe(gif(function (file) {\n        return file.isStream();\n      },\n      streamify(concat(concatOpts)),\n      concat(concatOpts)\n    ))\n    .pipe(gif(isOptionEnabled(opts.bundleOptions.rev, opts.env),\n      gif(function (file) {\n        return file.isStream();\n      }, streamify(rev()), rev())\n    ))\n    .pipe(gif(function (file) {\n        return sourcemaps.isEnabled(opts);\n      }, gsourcemaps.write(\n        opts.bundleOptions.pluginOptions['gulp-sourcemaps'][BundleKeys.SCRIPTS].destPath,\n        opts.bundleOptions.pluginOptions['gulp-sourcemaps'][BundleKeys.SCRIPTS].write\n      )\n    ))\n    .pipe(addBundleResultsToFile(opts.bundleName, BundleKeys.SCRIPTS, opts.bundleOptions.result, opts.env, opts.isBundleAll, opts.bundleOrder, relativeSources));\n};\n\nmodule.exports.styles = function (opts) {\n  var self = this;\n  var relativeSources = [];\n  return gulp.src(opts.src, {base: opts.base})\n    .pipe(using.bundle(opts.bundleName, BundleKeys.STYLES, opts.env, opts.isBundleAll))\n    .pipe(through.obj(function (file, enc, cb) {\n      relativeSources.push(file.relative);\n      self.attachStreamOptions(file, opts);\n      this.push(file);\n      cb();\n    }))\n    .pipe(\n    gif(function (file) {\n        return sourcemaps.isEnabled(opts);\n      }, gsourcemaps.init(opts.bundleOptions.pluginOptions['gulp-sourcemaps'][BundleKeys.STYLES].init)\n    ))\n    .pipe(opts.bundleOptions.transforms[BundleKeys.STYLES]())\n    .on('error', function (e) {\n      self.handleTransformError(this, opts.isWatch, opts.bundleName, BundleKeys.STYLES, e);\n    })\n    .pipe(gif(function (file) {\n        return sourcemaps.isEnabled(opts);\n      }, through.obj(sourcemaps.verify)\n    ))\n    .pipe(gif(function (file) {\n      return isMinEnabled.css(file, opts);\n    }, cleanCSS(opts.bundleOptions.pluginOptions['gulp-clean-css'])))\n    .pipe(gif(function (file) {\n        return opts.bundleOptions.order && opts.bundleOptions.order.styles;\n      }, order(opts.bundleOptions.order.styles)\n    ))\n    .pipe(concat(opts.bundleName + ((opts.isBundleAll && opts.env) ? '.' + opts.env : '') + '.css'))\n    .pipe(gif(isOptionEnabled(opts.bundleOptions.rev, opts.env), rev()))\n    .pipe(gif(function (file) {\n        return sourcemaps.isEnabled(opts);\n      }, gsourcemaps.write(\n        opts.bundleOptions.pluginOptions['gulp-sourcemaps'][BundleKeys.STYLES].destPath,\n        opts.bundleOptions.pluginOptions['gulp-sourcemaps'][BundleKeys.STYLES].write\n      )\n    ))\n    .pipe(addBundleResultsToFile(opts.bundleName, BundleKeys.STYLES, opts.bundleOptions.result, opts.env, opts.isBundleAll, opts.bundleOrder, relativeSources));\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/using.js":"var gutil = require('gulp-util'),\n  logger = require('./service/logger'),\n  through = require('through2'),\n  stringHelper = require('./string-helper');\n\nmodule.exports.bundleName = function(key, type, env, bundleAllEnvironments) {\n  var envPrefix = '';\n  if (bundleAllEnvironments) {\n    envPrefix = env ? env + '.' : 'default.';\n  }\n  return envPrefix + key + '.' + type;\n};\n\nmodule.exports.bundle = function (key, type, env, bundleAllEnvironments) {\n  var bundleName = this.bundleName(key, type, env, bundleAllEnvironments);\n  var prefix = \"Bundle '\" + gutil.colors.green(bundleName) + \"' using\";\n  return through.obj(function (file, enc, cb) {\n    logger.log(prefix, gutil.colors.magenta(file.relative));\n    this.push(file);\n    cb();\n  });\n};\n\nmodule.exports.copy = function (base) {\n  return through.obj(function (file, enc, cb) {\n    var pathReplace = (base === '.') ? file.cwd : base;\n    if (!stringHelper.endsWith(pathReplace, '/')) {\n      pathReplace += '/';\n    }\n    logger.log(\"Copy file\", gutil.colors.magenta(file.path.replace(pathReplace, '')));\n    this.push(file);\n    cb();\n  });\n};","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/sourcemaps.js":"var gutil = require('gulp-util'),\n  logger = require('./service/logger'),\n  warnPrefix = gutil.colors.bgYellow.black('WARN');\n\nfunction Sourcemaps() {\n}\n\nSourcemaps.prototype.verify = function (file, enc, cb) {\n  if (!file.isStream() && // ignore streams (e.g. browserify) this those will implement their own sourcemaps\n    (!file.sourceMap || !file.sourceMap.sources || !file.sourceMap.sources.length)) {\n    // only log error in case user doesn't care about source maps.\n    // often this will result with an error later on in the pipe anyways.\n    logger.log(\"\\n\" +\n      warnPrefix + \" Source map is empty for file '\" + gutil.colors.magenta(file.relative) + \"'.\\n\" +\n      warnPrefix + \" This is most likely not a problem with '\" + gutil.colors.cyan('gulp-bundle-assets') + \"' itself.\\n\" +\n      warnPrefix + \" This usually happens when a file passing through the stream is invalid or malformed\\n\" +\n      warnPrefix + \" or if you have a misbehaving custom transform.\\n\");\n  }\n  this.push(file);\n  cb();\n};\n\n/**\n * Support different variations of the option: map, maps, sourcemap, sourcemaps\n *\n * @param {Object} opts bundle config\n * @returns {boolean} whether to disabled sourcemaps\n */\nSourcemaps.prototype.isEnabled = function (opts) {\n  // default is undefined, which returns true\n  if (typeof opts.bundleOptions.maps !== 'undefined') {\n    return opts.bundleOptions.maps !== false;\n  }\n  if (typeof opts.bundleOptions.map !== 'undefined') {\n    return opts.bundleOptions.map !== false;\n  }\n  if (typeof opts.bundleOptions.sourcemap !== 'undefined') {\n    return opts.bundleOptions.sourcemap !== false;\n  }\n  if (typeof opts.bundleOptions.sourcemaps !== 'undefined') {\n    return opts.bundleOptions.sourcemaps !== false;\n  }\n  return true;\n};\n\nmodule.exports = new Sourcemaps();","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/is-option-enabled.js":"var util = require('util');\nvar contains = require('lodash').contains;\nmodule.exports = function(opt, env) {\n  if (typeof opt === 'undefined') {\n    return true;\n  } else if (util.isArray(opt)) {\n    return contains(opt, env);\n  } else if (typeof opt === 'string') {\n    return opt === env;\n  }\n  return !!opt;\n};","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/results/add-bundle-results-to-file.js":"var through = require('through2'),\n  path = require('path'),\n  Bundle = require('./../model/bundle');\n\nmodule.exports = function(key, type, resultOptions, env, bundleAllEnvironments, bundleOrder, srcFiles) {\n  return through.obj(function (file, enc, cb) {\n    if (path.extname(file.path) !== '.map') { // ignore .map files\n      resultOptions = resultOptions || {};\n      resultOptions.bundleOrder = bundleOrder;\n      file.bundle = new Bundle({\n        name: key,\n        type: type,\n        result: resultOptions,\n        env: env,\n        bundleAllEnvironments: bundleAllEnvironments,\n        srcFiles: srcFiles\n      });\n    }\n    this.push(file);\n    cb();\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/model/bundle.js":"module.exports = Bundle;\n\nfunction Bundle(options) {\n  if (!options) options = {};\n  this.name = options.name || null; // \"main\", \"vendor\", etc.\n  this.type = options.type || null; // \"scripts\" | \"styles\"\n  this.result = options.result || {};\n  this.result.type = this.result.type || 'html'; // \"jsx\", \"plain\", etc\n  this.env = options.env || ''; // current NODE_ENV\n  this.bundleAllEnvironments = typeof options.bundleAllEnvironments !== 'undefined' ?\n    options.bundleAllEnvironments : false; // flag from main bundle options\n  this.srcFiles = options.srcFiles || null; // original (unprocessed) files - only complete after stream complete\n}\n","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/is-min-enabled.js":"var isMinSrcDefinedForFile = require('./is-min-src-defined-for-file'),\n  isOptionEnabled = require('./is-option-enabled');\n\nmodule.exports.getMinCssOption = function(opts) {\n  // support both \"minCSS\" and \"minCss\" in case of typo\n  var minCss = opts.bundleOptions.minCSS;\n  if (typeof minCss === 'undefined') {\n    minCss = opts.bundleOptions.minCss;\n  }\n  return minCss;\n};\n\nmodule.exports.css = function (file, opts) {\n  return !isMinSrcDefinedForFile(file, opts.minSrcs, opts.bundleName, opts.type) &&\n    isOptionEnabled(this.getMinCssOption(opts), opts.env);\n};\n\nmodule.exports.js = function (file, opts) {\n  return !isMinSrcDefinedForFile(file, opts.minSrcs, opts.bundleName, opts.type) &&\n    isOptionEnabled(opts.bundleOptions.uglify, opts.env);\n};","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/is-min-src-defined-for-file.js":"var _ = require('lodash'),\n  stringHelper = require('./string-helper');\n\nmodule.exports = function (file, minSrcs, bundleName, type) {\n  var isMinFile = false;\n  if (minSrcs[bundleName] && minSrcs[bundleName][type]) {\n    isMinFile = _.some(minSrcs[bundleName][type], function (obj) {\n      // only doing simple endsWith matching here.\n      // to be technically correct, should glob match in case\n      // they put a glob in minSrc\n      return stringHelper.endsWith(obj.src, file.relative) || stringHelper.endsWith(obj.minSrc, file.relative);\n    });\n  }\n  return isMinFile;\n};","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/stream-copy.js":"var gulp = require('gulp'),\n  gutil = require('gulp-util'),\n  util = require('util'),\n  path = require('path'),\n  using = require('./using'),\n  pathifySrc = require('./pathify-config-src');\n\nfunction StreamCopy() {\n}\n\n// assume configBase will ALWAYS be defined (and defaulted to '.')\nStreamCopy.prototype.getCustomBase = function (configBase, relativeBase) {\n  if (!relativeBase) {\n    return configBase;\n  }\n  return path.join(configBase, relativeBase);\n};\n\n/**\n * @param {String} item\n * @param base\n * @returns {*}\n */\nStreamCopy.prototype.getStringCopyStream = function (item, base) {\n  return gulp.src(pathifySrc(item, base), { base: base })\n    .pipe(using.copy(base));\n};\n\n/**\n * @param {Object} item\n * @param base\n * @returns {*}\n */\nStreamCopy.prototype.getObjectCopyStream = function (item, base) {\n  return gulp.src(pathifySrc(item.src, base), { base: this.getCustomBase(base, item.base) })\n    .pipe(using.copy(base));\n};\n\nStreamCopy.prototype.getCopyStream = function (item, base) {\n  if (typeof item === 'string') {\n    return this.getStringCopyStream(item, base);\n  } else if (typeof item === 'object' && !util.isArray(item)) {\n    return this.getObjectCopyStream(item, base);\n  }\n  this.throwUnsupportedSyntaxError();\n};\n\nStreamCopy.prototype.throwUnsupportedSyntaxError = function () {\n  throw new gutil.PluginError('gulp-bundle-assets', 'Unsupported syntax for copy. See here for supported variations: ' +\n    'https://github.com/dowjones/gulp-bundle-assets/blob/master/examples/copy/bundle.config.js');\n};\n\n// naturally a singleton because node's require caches the value assigned to module.exports\nmodule.exports = new StreamCopy();","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/stream-bundles-util.js":"var logger = require('./service/logger'),\n  gutil = require('gulp-util'),\n  warnPrefix = gutil.colors.bgYellow.black('WARN');\n\nfunction StreamBundlesUtil() {\n}\n\nStreamBundlesUtil.prototype.warnIfNoBundleProperty = function (config) {\n  if (config && !config.bundle && config.file && config.file.relative) { // can guarantee !!file b/c (config instanceof Config)\n    logger.log(warnPrefix, \"No '\" + gutil.colors.cyan('bundle') +\n      \"' property found in \" + gutil.colors.magenta(config.file.relative) + \". Did you mean to define one?\");\n  }\n};\n\n// naturally a singleton because node's require caches the value assigned to module.exports\nmodule.exports = new StreamBundlesUtil();","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/results/index.js":"var through = require('through2'),\n  path = require('path'),\n  bluebird = require('bluebird'),\n  gracefulFs = require('graceful-fs'),\n  fs = bluebird.promisifyAll(gracefulFs),\n  fsExists = gracefulFs.exists,\n  mkdirp = require('mkdirp'),\n  _ = require('lodash'),\n  addBundleResults = require('./add-to-results');\n\nfunction defaulOptions(opts) {\n  var options = {\n    dest: './',\n    pathPrefix: '',\n    fileName: 'bundle.result',\n    outputUnprocessed: false,\n    unprocessedOutputFileName: 'bundle.source',\n    unprocessedOutputPathPrefix: opts.pathPrefix || ''\n  };\n  if (typeof opts === 'string') {\n    options.dest = opts;\n  } else {\n    _.assign(options, opts);\n  }\n  return options;\n}\n\nmodule.exports = {\n  all: function (opts) {\n    var resultJsons = {},\n      resultOrder,\n      options = defaulOptions(opts);\n\n    function collectResults(file, enc, cb) {\n      addBundleResults(resultJsons, file, options.pathPrefix, options.fileName, options.outputUnprocessed && options.unprocessedOutputFileName, options.unprocessedOutputPathPrefix);\n      if (!resultOrder) {\n        try {\n          resultOrder = file.bundle.result.bundleOrder; // Any one of these properties could be null\n        } catch (err) {}\n      }\n      this.push(file);\n      cb();\n    }\n\n    function writeResults(done) {\n      mkdirp(options.dest, function (err) {\n        if (err) throw err;\n\n        var streams = [];\n\n        _.each(resultJsons, function (result) {\n          var sortedContents = {};\n          try {\n            // order bundle names based on original bundle.config.js ordering\n            _.each(resultOrder || Object.keys(result.contents), function (key) {\n              // order scripts/styles for consistency\n              var sortedBundleTypes = {};\n              _.each(Object.keys(result.contents[key]).sort(), function (typeKey) {\n                sortedBundleTypes[typeKey] = result.contents[key][typeKey];\n              });\n              sortedContents[key] = sortedBundleTypes;\n            });\n          } catch (err) { // any problems sorting? just fall back to what we get out of the stream\n            sortedContents = result.contents;\n          }\n          var filePath = path.join(options.dest, result.filename),\n            data = JSON.stringify(sortedContents, null, 2);\n          streams.push(fs.writeFileAsync(filePath, data));\n        });\n\n        bluebird.all(streams).then(function () {\n          done();\n        });\n\n      });\n    }\n\n    return through.obj(collectResults, writeResults);\n  },\n  incremental: function (opts) {\n    var resultJsons = {},\n      options = defaulOptions(opts);\n\n    return through.obj(function (file, enc, cb) {\n\n      var self = this;\n\n      if (file.bundle) {\n\n        addBundleResults(resultJsons, file, options.pathPrefix, options.fileName);\n\n        mkdirp(options.dest, function (err) {\n          if (err) throw err;\n\n          var envKey = _.findKey(resultJsons, function () {\n            return true;\n          });\n\n          var filePath = path.join(options.dest, resultJsons[envKey].filename);\n\n          fsExists(filePath, function (exists) {\n\n            var action;\n            if (exists) {\n              action = fs.readFileAsync(filePath, 'utf8')\n                .then(function (data) {\n                  var newData = resultJsons[envKey].contents;\n                  var mergedData = _.merge(JSON.parse(data), newData);\n                  var sortedData = {};\n                  var resultOrder;\n                  try {\n                    resultOrder = file.bundle.result.bundleOrder; // Any one of these properties could be null\n                    // order bundle names based on original bundle.config.js ordering\n                    _.each(resultOrder || Object.keys(mergedData), function (key) {\n                      // order scripts/styles for consistency\n                      var sortedBundleTypes = {};\n                      _.each(Object.keys(mergedData[key]).sort(), function (typeKey) {\n                        sortedBundleTypes[typeKey] = mergedData[key][typeKey];\n                      });\n                      sortedData[key] = sortedBundleTypes;\n                    });\n                  } catch (err) { // any problems sorting? just fall back to what we get out of the stream\n                    sortedData = mergedData;\n                  }\n                  return fs.writeFileAsync(filePath, JSON.stringify(sortedData, null, 2));\n                });\n            } else {\n              var freshData = JSON.stringify(resultJsons[envKey].contents, null, 2);\n              action = fs.writeFileAsync(filePath, freshData);\n            }\n            action.then(function () {\n              self.push(file);\n              cb();\n            });\n          });\n        });\n\n      } else {\n        self.push(file);\n        cb();\n      }\n\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/results/add-to-results.js":"var toResultType = require('./type'),\n  _ = require('lodash');\n\n/**\n * add bundle defined in file.bundle to obj\n * @param {Object} obj\n * @param {File} file\n * @param {string} pathPrefix\n */\nmodule.exports = function(obj, file, pathPrefix, fileName, rawFile, rawPathPrefix) {\n  if (file.bundle) {\n    var env = file.bundle.env && file.bundle.bundleAllEnvironments ? file.bundle.env : '';\n    var envKey = (env || 'default') + '_normal';\n    var outputFilePostfix = (env ? '.' + env : '') + '.json';\n    obj[envKey] = obj[envKey] || {\n      filename: fileName + outputFilePostfix,\n      contents: {}\n    };\n    obj[envKey].contents[file.bundle.name] = obj[envKey].contents[file.bundle.name] || {};\n    obj[envKey].contents[file.bundle.name][file.bundle.type] = toResultType(file, pathPrefix + file.relative);\n    if (rawFile && file.bundle.srcFiles) {\n      var rawKey = (env || 'default') + '_raw';\n      obj[rawKey] = obj[rawKey] || {\n        filename: rawFile + outputFilePostfix,\n        contents: {}\n      };\n      obj[rawKey].contents[file.bundle.name] = obj[rawKey].contents[file.bundle.name] || {};\n      obj[rawKey].contents[file.bundle.name][file.bundle.type] = _.map(file.bundle.srcFiles, function (filePath) {\n        return toResultType(file, rawPathPrefix + filePath);\n      }).sort();\n    }\n  }\n  return obj;\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/results/type/index.js":"var gutil = require('gulp-util'),\n  logger = require('../../service/logger'),\n  path = require('path'),\n  BundleResult = require('../../model/bundle-result'),\n  warnPrefix = gutil.colors.bgYellow.black('WARN');\n\nmodule.exports = function(file, relativePath) {\n  var bundleType = file.bundle.type;\n  var resulter = loadResulter(file.bundle.result.type, bundleType);\n  return resulter(relativePath.replace(/\\\\/g, '/')); // force result.json uri to never have backslashes, even on posix systems\n};\n\n/**\n * @param {string|Object|Function} resulter\n * @param bundleType\n */\nfunction loadResulter(resulter, bundleType) {\n  if (typeof resulter === 'function') {\n    return resulter;\n  }\n  if (typeof resulter === 'object') {\n    if (!resulter[bundleType]) {\n      return loadResulter(BundleResult.DEFAULT, bundleType);\n    }\n    return loadResulter(resulter[bundleType], bundleType);\n  }\n  if (typeof resulter === 'string') {\n    var resulterPath = path.join(__dirname + '/' + bundleType + '-' + resulter + '.js');\n    try {\n      return loadResulter(require(resulterPath), bundleType);\n    } catch(e) {\n      var defaultResulterPath = path.join(__dirname + '/' + bundleType + '-html.js');\n      logger.log(\"\\n\" +\n      warnPrefix + \" Failed to load result writer: \" + resulterPath + \"\\n\" +\n        warnPrefix + \" using default instead: \" + defaultResulterPath);\n      return loadResulter(require(defaultResulterPath), bundleType);\n    }\n  }\n  throw new Error('Failed to load result function \"' + resulter + '\" for type \"' + bundleType + '\"');\n}\n","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/model/bundle-result.js":"module.exports = {\n  DEFAULT: 'html'\n};","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/transform_helper/index.js":"var lazypipe = require('lazypipe'),\n  readableStream = require('readable-stream'),\n  through = require('through2'),\n  duplexer = require('duplexer2'),\n  gif = require('gulp-if'),\n  less = require('gulp-less'),\n  coffee = require('gulp-coffee');\n\nmodule.exports = {\n  browserify: function (func) {\n    return lazypipe()\n      .pipe(function () {\n        var writable = new readableStream.Writable({objectMode: true});\n        var readable = through.obj(function (file, enc, cb) { // noop\n          this.push(file);\n          cb();\n        });\n\n        writable._write = function _write(file, encoding, done) {\n          func(file, readable);\n          return done();\n        };\n\n        return duplexer(writable, readable);\n      });\n  },\n  less: function (opts) {\n    opts = opts || {};\n    return lazypipe()\n      .pipe(function () {\n        return gif(isLessFile, less(opts));\n      });\n  },\n  coffee: function (opts) {\n    opts = opts || {};\n    return lazypipe()\n      .pipe(function () {\n        return gif(isCoffeeFile, coffee(opts));\n      });\n  }\n};\n\nfunction stringEndsWith(str, suffix) {\n  return str.indexOf(suffix, str.length - suffix.length) !== -1;\n}\nfunction isLessFile(file) {\n  return stringEndsWith(file.relative, 'less');\n}\n\nfunction isCoffeeFile(file) {\n  return stringEndsWith(file.relative, 'coffee');\n}","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/model/config.js":"var path = require('path'),\n  _ = require('lodash'),\n  deepPluck = require('../deep-pluck'),\n  deepPluckParent = require('../deep-pluck-parent'),\n  BundleType = require('./bundle-type');\n\nmodule.exports = Config;\n\nfunction Config(file, options) {\n\n  var userConfig;\n\n  if (isInstanceOfVinylFile(file)) {\n    userConfig = require(file.path);\n    userConfig.file = {\n      cwd: file.cwd,\n      base: file.base,\n      path: file.path,\n      relative: file.relative\n    };\n  } else {\n    userConfig = file;\n  }\n\n  if (!userConfig || !(userConfig.bundle || userConfig.copy)) {\n    throw new Error('Configuration file should be in the form \"{ bundle: {}, copy: {} }\"');\n  }\n  this.options = _.merge({\n    base: '.'\n  }, options);\n  _.merge(this, userConfig);\n\n}\n\n// dumb way to do instanceof so this module works when required from other modules\n// since `file` will be an instance of an object from a somewhere else\nfunction isInstanceOfVinylFile(file) {\n  return file && file.isBuffer && file.pipe;\n}\n\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Returns uniq list of all environments defined in config file\n * @returns {Array}\n */\nConfig.prototype.getAllEnvironments = function () {\n  return _.chain(['uglify', 'rev', 'useMin'])\n    .map(deepPluck, this)\n    .flatten(true)\n    .uniq()\n    .filter(isString)\n    .value();\n};\n\nConfig.prototype.getAllMinSrcs = function () {\n\n  var self = this,\n    minSrcs = {};\n\n  _.forEach(Object.keys(this.bundle), function (bundleKey) {\n    minSrcs[bundleKey] = minSrcs[bundleKey] || {};\n\n    if (self.bundle[bundleKey][BundleType.SCRIPTS]) {\n      minSrcs[bundleKey][BundleType.SCRIPTS] = _(['minSrc'])\n        .map(deepPluckParent, self.bundle[bundleKey][BundleType.SCRIPTS])\n        .flatten()\n        .value();\n    }\n\n    if (self.bundle[bundleKey][BundleType.STYLES]) {\n      minSrcs[bundleKey][BundleType.STYLES] = _(['minSrc'])\n        .map(deepPluckParent, self.bundle[bundleKey][BundleType.STYLES])\n        .flatten()\n        .value();\n    }\n  });\n\n  return minSrcs;\n};","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/deep-pluck.js":"var _ = require('lodash');\n\n/**\n * http://stackoverflow.com/questions/15642494/find-property-by-name-in-a-deep-object\n * `this` should be the collection to be traversed\n * @param key {String}\n * @returns {Array} Returns a new array of property values\n */\nmodule.exports = function deepPluck(key) {\n  if (_.has(this, key)) {\n    return [this[key]];\n  }\n  var res = [];\n  _.forEach(this, function (v) {\n    if (typeof v === \"object\" && (v = deepPluck.call(v, key)).length) {\n      res.push.apply(res, v);\n    }\n  });\n  return res;\n};","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/deep-pluck-parent.js":"var _ = require('lodash');\n\n/**\n * http://stackoverflow.com/questions/15642494/find-property-by-name-in-a-deep-object\n * `this` should be the collection to be traversed\n * @param key {String}\n * @returns {Array} Returns a new array of objects with that property\n */\nmodule.exports = function deepPluckParent(key) {\n  if (_.has(this, key)) {\n    return [this];\n  }\n  var res = [];\n  _.forEach(this, function (v) {\n    if (typeof v === \"object\" && (v = deepPluckParent.call(v, key)).length) {\n      res.push.apply(res, v);\n    }\n  });\n  return res;\n};","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/watch/index.js":"var ConfigModel = require('../model/config'),\n  cache = require('../service/cache'),\n  streamBundlesWatch = require('../stream-bundles-watch'),\n  gutil = require('gulp-util');\n\nmodule.exports = function (opts) {\n  var configFile,\n    config;\n  opts = opts || {};\n  if (!opts.configPath) {\n    throw new gutil.PluginError('gulp-bundle-assets', 'configPath option is required when watching');\n  }\n  if (!opts.dest) {\n    throw new gutil.PluginError('gulp-bundle-assets', 'dest option is required when watching');\n  }\n  \n  try {\n    configFile = require(opts.configPath);\n    config = new ConfigModel(configFile, opts);\n  } catch (e) {\n    gutil.log(e);\n    throw new gutil.PluginError('gulp-bundle-assets', 'Failed to parse config file');\n  }\n\n  cache.set('config', config);\n\n  streamBundlesWatch(config);\n};","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/stream-bundles-watch.js":"var through = require('through2'),\n  BundleKeys = require('./model/bundle-keys'),\n  gulp = require('gulp'),\n  util = require('util'),\n  using = require('./using'),\n  sourcemaps = require('gulp-sourcemaps'),\n  gutil = require('gulp-util'),\n  logger = require('./service/logger'),\n  gif = require('gulp-if'),\n  _ = require('lodash'),\n  pathifySrc = require('./pathify-config-src'),\n  stringHelper = require('./string-helper'),\n  bundleAllEnvironments = require('./bundle-all-environments'),\n  bundleDone = require('./watch/bundle-done'),\n  initOptionDefaults = require('./init-option-defaults'),\n  results = require('./results').incremental,\n  streamFiles = require('./stream-files'),\n  streamCopy = require('./stream-copy'),\n  streamBundlesUtil = require('./stream-bundles-util');\n\nfunction _bundle(config, env) {\n  var bundles = config.bundle,\n    isBundleAll = config.options && config.options.bundleAllEnvironments,\n    base = (config.options) ? config.options.base : '.', // can guarantee !!options b/c (config instanceof Config)\n    resultOpts = (config.options) ? config.options.results : null,\n    minSrcs = (config.getAllMinSrcs) ? config.getAllMinSrcs() : {};\n\n  if (env) {\n    logger.log('Creating bundle(s) for environment \"' + env + '\"');\n  }\n\n  _.forEach(Object.keys(bundles), function (bundleName) {\n\n    var namedBundleObj = bundles[bundleName];\n    initOptionDefaults(namedBundleObj);\n\n    _.forEach(Object.keys(namedBundleObj), function (type) {\n      var scriptWatch,\n        styleWatch,\n        scriptsPath,\n        stylesPath,\n        prettyScriptsBundleName,\n        prettyStylesBundleName;\n\n      /* jshint -W035 */\n      if (type === BundleKeys.SCRIPTS) {\n\n        scriptWatch = namedBundleObj[BundleKeys.OPTIONS].watch[BundleKeys.SCRIPTS];\n\n        if (scriptWatch !== false) {\n\n          scriptsPath = pathifySrc(namedBundleObj[BundleKeys.SCRIPTS], base, namedBundleObj[BundleKeys.OPTIONS], env);\n          prettyScriptsBundleName = using.bundleName(bundleName, BundleKeys.SCRIPTS, env, isBundleAll);\n\n          logger.log(\"Starting '\" + gutil.colors.cyan(\"watch\") + \"' for bundle '\" + gutil.colors.green(prettyScriptsBundleName) + \"'...\");\n\n          gulp.watch((typeof scriptWatch === 'string' || util.isArray(scriptWatch)) ? scriptWatch : scriptsPath)\n            .on('change', function (file) { // log changed file?\n\n              var start = process.hrtime();\n\n              streamFiles.scripts({\n                src: scriptsPath,\n                base: base,\n                env: env,\n                type: type,\n                bundleName: bundleName,\n                bundleOptions: namedBundleObj[BundleKeys.OPTIONS],\n                isBundleAll: isBundleAll,\n                minSrcs: minSrcs,\n                isWatch: true\n              })\n                .pipe(gif(resultOpts, results(resultOpts)))\n                .pipe(gulp.dest(config.options.dest))\n                .pipe(through.obj(function (file, enc, cb) {\n                  bundleDone(prettyScriptsBundleName, start);\n                }));\n\n            });\n        }\n\n      } else if (type === BundleKeys.STYLES) {\n\n        styleWatch = namedBundleObj[BundleKeys.OPTIONS].watch[BundleKeys.STYLES];\n\n        if (styleWatch !== false) {\n\n          stylesPath = pathifySrc(namedBundleObj[BundleKeys.STYLES], base, namedBundleObj[BundleKeys.OPTIONS], env);\n          prettyStylesBundleName = using.bundleName(bundleName, BundleKeys.STYLES, env, isBundleAll);\n\n          logger.log(\"Starting '\" + gutil.colors.cyan(\"watch\") + \"' for bundle '\" + gutil.colors.green(prettyStylesBundleName) + \"'...\");\n\n          gulp.watch((typeof styleWatch === 'string' || util.isArray(styleWatch)) ? styleWatch : stylesPath)\n            .on('change', function (file) { // log changed file?\n\n              var start = process.hrtime();\n\n              streamFiles.styles({\n                src: stylesPath,\n                base: base,\n                env: env,\n                type: type,\n                bundleName: bundleName,\n                bundleOptions: namedBundleObj[BundleKeys.OPTIONS],\n                isBundleAll: isBundleAll,\n                minSrcs: minSrcs,\n                isWatch: true\n              })\n                .pipe(gif(resultOpts, results(resultOpts)))\n                .pipe(gulp.dest(config.options.dest))\n                .pipe(through.obj(function (file, enc, cb) {\n                  bundleDone(prettyStylesBundleName, start);\n                }));\n\n            });\n        }\n\n      } else if (type === BundleKeys.OPTIONS) {\n        // ok\n      } else {\n        throw new gutil.PluginError('gulp-bundle-assets', 'Unsupported object key found: \"bundle.' +\n          bundleName + '.' + type + '\". Supported types are \"' +\n          BundleKeys.SCRIPTS + '\", \"' + BundleKeys.STYLES + '\" and \"' + BundleKeys.OPTIONS + '\"');\n      }\n      /* jshint +W035 */\n\n    });\n\n  });\n\n}\n\nfunction watchStringCopyStream(config, item, base) {\n  gulp.watch(item)\n    .on('change', function (file) { // log changed file?\n      streamCopy.getStringCopyStream(item, base)\n        .pipe(gulp.dest(config.options.dest));\n    });\n}\n\nfunction watchObjectCopyStream(config, item, base) {\n  var watchPath = pathifySrc(item.src, base);\n  gulp.watch(watchPath)\n    .on('change', function (file) { // log changed file?\n      streamCopy.getObjectCopyStream(item, base)\n        .pipe(gulp.dest(config.options.dest));\n    });\n}\n\nfunction _copy(config) {\n  var base = (config.options) ? config.options.base : '.'; // can guarantee !!options b/c (config instanceof Config)\n\n  logger.log(\"Starting '\" + gutil.colors.cyan(\"watch\") + \"' for files to copy...\");\n\n  if (typeof config.copy === 'string') {\n    watchStringCopyStream(config, config.copy, base);\n  } else if (util.isArray(config.copy)) {\n    _.forEach(config.copy, function (item) {\n      if (typeof item === 'string') {\n        return watchStringCopyStream(config, item, base);\n      } else if (typeof item === 'object' && !util.isArray(item) &&\n        config.copy.watch !== false) {\n        return watchObjectCopyStream(config, item, base);\n      }\n      streamCopy.throwUnsupportedSyntaxError();\n    });\n  } else if (typeof config.copy === 'object' && config.copy.watch !== false) {\n    watchObjectCopyStream(config, config.copy, base);\n  } else {\n    streamCopy.throwUnsupportedSyntaxError();\n  }\n}\n\nfunction bundle(config) {\n\n  if (config.bundle) {\n    if (config.options && config.options.bundleAllEnvironments) { // can guarantee !!options b/c (config instanceof Config)\n      bundleAllEnvironments(config, _bundle);\n    } else {\n      _bundle(config, process.env.NODE_ENV);\n    }\n  }\n\n  streamBundlesUtil.warnIfNoBundleProperty(config);\n\n  if (config.copy) {\n    _copy(config);\n  }\n}\n\nmodule.exports = bundle;","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/watch/bundle-done.js":"var gulp = require('gulp'),\n  logger = require('../service/logger'),\n  gutil = require('gulp-util'),\n  prettyTime = require('pretty-hrtime'),\n  using = require('./../using');\n\nmodule.exports = function (name, start) {\n  var hrDuration = process.hrtime(start); // [seconds,nanoseconds]\n  var time = prettyTime(hrDuration);\n  logger.log('Finished bundling', '\\'' + gutil.colors.green(name) + '\\'',\n    'after', gutil.colors.magenta(time)\n  );\n};","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/results/type/plain.js":"module.exports = function (path) {\n  return path;\n};","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/results/type/scripts-html.js":"module.exports = function (path) {\n  return \"<script src='\" + path + \"' type='text/javascript'></script>\";\n};","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/results/type/scripts-jsx.js":"module.exports = function (path) {\n  return \"<script src='\" + path + \"' type='text/jsx'></script>\";\n};","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/results/type/scripts-plain.js":"module.exports = require('./plain');","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/results/type/styles-html.js":"module.exports = function (path) {\n  return \"<link href='\" + path + \"' media='all' rel='stylesheet' type='text/css'/>\";\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-bundle-assets/node_modules/gulp-bundle-assets/lib/results/type/styles-plain.js":"module.exports = require('./plain');"}